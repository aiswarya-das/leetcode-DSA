202. Happy Number

Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:
- Starting with any positive integer, replace the number by the sum of the squares of its digits.
- Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
- Return true if n is a happy number, and false if not.

Example 1:
Input: n = 19
Output: true
Explanation:
1² + 9² = 82
8² + 2² = 68
6² + 8² = 100
1² + 0² + 0² = 1

Example 2:
Input: n = 2
Output: false

Python Solution:

class Solution:
    def isHappy(self, n: int) -> bool:
        l = set()  # To store numbers we've already seen (to detect cycles)

        while n not in l:
            l.add(n)
            n = self.square(n)  # Replace n with sum of squares of digits
            if n == 1:
                return True  # Found a happy number

        return False  # Loop detected, not a happy number

    def square(self, n):
        res = 0
        while n:
            digit = n % 10      # Extract last digit
            digit = digit ** 2  # Square the digit
            res += digit        # Add to result
            n = n // 10         # Remove last digit
        return res
