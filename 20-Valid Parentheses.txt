20. Valid Parentheses

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']',
determine if the input string is valid.

An input string is valid if:
1. Open brackets must be closed by the same type of brackets.
2. Open brackets must be closed in the correct order.
3. Every close bracket has a corresponding open bracket of the same type.

Example 1:
Input: s = "()[]{}"
Output: true

Example 2:
Input: s = "(]"
Output: false

Python Solution:

class Solution:
    def isValid(self, s: str) -> bool:
        l = []  # Stack to hold opening brackets
        d = { ")" : "(", "}" : "{", "]" : "[" }  # Mapping of closing to opening brackets

        for i in s:
            if i in d:
                # If stack is not empty and top of stack matches expected opening bracket
                if l and l[-1] == d[i]:
                    l.pop()  # Valid pair, remove opening bracket from stack
                else:
                    return False  # Invalid bracket or unmatched closing bracket
            else:
                l.append(i)  # Push opening bracket to stack

        return True if not l else False  # Return True if all brackets matched
